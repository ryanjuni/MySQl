/* EXERCÍCIOS 5 */

CREATE DATABASE MEDIA;
USE MEDIA;


CREATE TABLE HISTO_MEDIAS (
ID INT AUTO_INCREMENT PRIMARY KEY,
NUMERO1 DECIMAL(10,2),
NUMERO2 DECIMAL(10,2),
NUMERO3 DECIMAL(10,2),
NUMERO4 DECIMAL(10,2),
RESULTADO DECIMAL(10,2),
DATAHORA DATETIME DEFAULT CURRENT_TIMESTAMP,
USUARIO NVARCHAR(100)
);



DELIMITER //
CREATE PROCEDURE SP_CALCULARMEDIA (
IN NUMERO1 DECIMAL(10,2),
IN NUMERO2 DECIMAL(10,2),
IN NUMERO3 DECIMAL(10,2),
IN NUMERO4 DECIMAL(10,2),
IN USUARIO NVARCHAR(100),
OUT RESULTADO DECIMAL(10,2) 
)
BEGIN
	SET RESULTADO = (NUMERO1+ NUMERO2 + NUMERO3 + NUMERO4) / 4;
     INSERT INTO HISTO_MEDIAS (
     NUMERO1, NUMERO2 , NUMERO3 , NUMERO4, RESULTADO , USUARIO
     ) VALUES ( 
      NUMERO1, NUMERO2 , NUMERO3 , NUMERO4, RESULTADO , USUARIO
     );
END //
DELIMITER ;


CALL SP_CALCULARMEDIA(7.5, 8.0, 9.0, 6.5, 'Ryan', @media);
SELECT @media AS MediaFinal;

/* EXERCÍCIOS 6 */

CREATE DATABASE SISTEMA_HOSPITALAR;
USE SISTEMA_HOSPITALAR;



CREATE TABLE Pacientes (
    Id INT PRIMARY KEY,
    Nome VARCHAR(100),
    DataNascimento DATE,
    Sexo CHAR(1),
    Telefone VARCHAR(15)
);


INSERT INTO Pacientes VALUES
(1, 'Ana Silva', '1985-03-12', 'F', '11999999991'),
(2, 'Carlos Souza', '1990-07-25', 'M', '11999999992'),
(3, 'Beatriz Lima', '1978-11-03', 'F', '11999999993'),
(4, 'João Mendes', '2000-01-15', 'M', '11999999994'),
(5, 'Mariana Costa', '1995-06-30', 'F', '11999999995');

CREATE TABLE Medicos (
    Id INT PRIMARY KEY,
    Nome VARCHAR(100),
    Especialidade VARCHAR(50),
    CRM VARCHAR(20),
    Telefone VARCHAR(15)
);


INSERT INTO Medicos VALUES
(1, 'Pedro Almeida', 'Cardiologia', 'CRM12345', '11988888881'),
(2, 'Fernanda Rocha', 'Pediatria', 'CRM12346', '11988888882'),
(3, 'Lucas Martins', 'Ortopedia', 'CRM12347', '11988888883'),
(4, 'Juliana Reis', 'Dermatologia', 'CRM12348', '11988888884'),
(5, 'Rafael Torres', 'Neurologia', 'CRM12349', '11988888885');


DELIMITER //

CREATE PROCEDURE ContarPacientesEMedicos()
BEGIN
    DECLARE totalPacientes INT;
    DECLARE totalMedicos INT;

    SELECT COUNT(*) INTO totalPacientes FROM Pacientes;
    SELECT COUNT(*) INTO totalMedicos FROM Medicos;

    SELECT totalPacientes AS 'Total de Pacientes', totalMedicos AS 'Total de Médicos';
END //

DELIMITER ;

CALL ContarPacientesEMedicos();

/* EXERCÍCIOS 7 */

DELIMITER //

CREATE PROCEDURE CalcularGastoFita()
BEGIN
    DECLARE quantidadePresentes INT DEFAULT 8;
    DECLARE fitaPorPresenteCM DECIMAL(5,2) DEFAULT 60.00;
    DECLARE precoPorMetro DECIMAL(5,2) DEFAULT 5.50;
    DECLARE totalFitaMetros DECIMAL(5,2);
    DECLARE custoTotal DECIMAL(6,2);

    SET totalFitaMetros = (quantidadePresentes * fitaPorPresenteCM) / 100;
    SET custoTotal = totalFitaMetros * precoPorMetro;
    SELECT custoTotal AS 'Custo Total (R$)', totalFitaMetros AS 'Fita Necessária (m)';
END //

DELIMITER ;


CALL CalcularGastoFita();



/* EXERCÍCIOS 8 */

 DELIMITER //
 CREATE PROCEDURE CALCULARCUBORAIZ ( IN NUMERO INT)
 BEGIN 
 DECLARE  CUBO INT;
 DECLARE RAIZ DECIMAL (5,2);
 DECLARE  RESULTADO DECIMAL (10,2);
 
 SET  CUBO = POWER(NUMERO,3);
 SET  RAIZ = SQRT(144);
 SET RESULTADO = CUBO + RAIZ ;
 SELECT 
 CUBO  AS 'CUBO DO NÚMERO',
 RAIZ  AS  'RAIZ DE 144',
 RESULTADO AS ' RESULTADO FINAL';
 END //
 DELIMITER ; 
 
 CALL CALCULARCUBORAIZ (3);
 
 
 
 /* EXERCÍCIOS 9 */
 
CREATE DATABASE CARROS;
USE CARROS;


CREATE TABLE veiculos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    modelo VARCHAR(100) NOT NULL,
    pais VARCHAR(20) NOT NULL,
    custo_fabrica DECIMAL(10,2) NOT NULL,
    impostos_percentual DECIMAL(5,2) NOT NULL,
    distribuicao DECIMAL(10,2) NOT NULL,
    margem_concessionaria_percentual DECIMAL(5,2) NOT NULL
);


CREATE TABLE historico_precos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    veiculo_id INT NOT NULL,
    data_calculo DATETIME DEFAULT CURRENT_TIMESTAMP,
    preco_final DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (veiculo_id) REFERENCES veiculos(id)
);



 DELIMITER //
CREATE PROCEDURE  CARROS_PRECO_FINAL ()
BEGIN 
 DECLARE CUSTO_BRASIL  DECIMAL (10,2) DEFAULT 15000.00;
 DECLARE IMPOSTO_BRASIL  DECIMAL (5,2) DEFAULT 0.45;
 DECLARE DISTRIBUICAO_BRASIL  DECIMAL (10,2) DEFAULT 3200.00;
 DECLARE MARGEM_BRASIL  DECIMAL (5,2) DEFAULT 0.04;
 
 DECLARE CUSTO_CHILE  DECIMAL (10,2) DEFAULT 12500.00;
 DECLARE IMPOSTO_CHILE  DECIMAL (5,2) DEFAULT 0.18;
 DECLARE DISTRIBUICAO_CHILE  DECIMAL (10,2) DEFAULT 1800.00;
 DECLARE MARGEM_CHILE  DECIMAL (5,2) DEFAULT 0.25;
 
 DECLARE PRECO_FINAL_BRASIL  DECIMAL (10,2);
 DECLARE PRECO_FINAL_CHILE   DECIMAL (10,2);
 
 SET PRECO_FINAL_BRASIL  = (CUSTO_BRASIL * (1 + IMPOSTO_BRASIL)) + DISTRIBUICAO_BRASIL;
 SET PRECO_FINAL_BRASIL  =  PRECO_FINAL_BRASIL * (1 + MARGEM_BRASIL);
 
 SET PRECO_FINAL_CHILE  = (CUSTO_CHILE * (1 + IMPOSTO_CHILE)) + DISTRIBUICAO_CHILE;
 SET PRECO_FINAL_CHILE  =  PRECO_FINAL_CHILE * (1 + MARGEM_CHILE);
 
 SELECT 
   PRECO_FINAL_BRASIL  AS  'PREÇO FINAL BRASIL (R$)',
   PRECO_FINAL_CHILE   AS  'PREÇO FINAL CHILE (R$)';

 END //
 DELIMITER ;
 
 CALL  CARROS_PRECO_FINAL () ;
 
/* EXERCÍCIOS 10 */ 
 
 CREATE DATABASE LANCHONETE ;
USE LANCHONETE;



CREATE TABLE CARDAPIO (
ITEM_ID INT  PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR (50),
PRECO DECIMAL (5,2)
);

CREATE TABLE PEDIDOS (
    PEDIDO_ID INT PRIMARY KEY AUTO_INCREMENT,
    CLIENTE VARCHAR(100),
    ITEM_ID INT,
    QUANTIDADE INT,
    DATA_PEDIDO DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ITEM_ID) REFERENCES CARDAPIO(ITEM_ID)
);

INSERT INTO CARDAPIO (NOME , PRECO) VALUES 
('Hambúrguer', 8.50),
('Pizza Individual', 12.00),
('Batata Frita', 6.00),
('Refrigerante', 4.50),
('Sorvete', 5.00);



DELIMITER //

CREATE PROCEDURE REGISTRO_CONSUMO (
    IN NOME_CLIENTE VARCHAR(100),
    IN NOME_ITEM VARCHAR(50),
    IN QTD INT
)
BEGIN
    DECLARE ITEM_ID_LOCAL INT;
    DECLARE PRECO_UNITARIO DECIMAL(5,2);
    DECLARE VALOR_TOTAL DECIMAL(10,2);
    SELECT ITEM_ID, PRECO INTO ITEM_ID_LOCAL, PRECO_UNITARIO
    FROM CARDAPIO
    WHERE NOME = NOME_ITEM
    LIMIT 1;
    SET VALOR_TOTAL = PRECO_UNITARIO * QTD;
    INSERT INTO PEDIDOS (CLIENTE, ITEM_ID, QUANTIDADE)
    VALUES (NOME_CLIENTE, ITEM_ID_LOCAL, QTD);
    SELECT 
        NOME_CLIENTE AS 'Cliente',
        NOME_ITEM AS 'Item',
        QTD AS 'Quantidade',
        PRECO_UNITARIO AS 'Valor Unitário (R$)',
        VALOR_TOTAL AS 'Valor Total (R$)',
        'PEDIDO REGISTRADO COM SUCESSO!' AS Mensagem;
END //

DELIMITER ;
CALL REGISTRO_CONSUMO ('Maria', 'Pizza Individual', 2);



/* EXERCÍCIOS 11 */

CREATE DATABASE LIVRARIA; 
USE LIVRARIA;



CREATE TABLE EDITORAS (
ID  INT PRIMARY KEY AUTO_INCREMENT,
NOME VARCHAR(100),
CNPJ VARCHAR(20),
TELEFONE VARCHAR (20),
CIDADE VARCHAR (50)
);

CREATE TABLE LIVROS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TITULO VARCHAR(100),
    AUTOR VARCHAR(100),
    ESTOQUE INT,
    PRECOCUSTO DECIMAL(7,2),
    PRECOVENDA DECIMAL(7,2),
    EDITORA_ID INT,
    FOREIGN KEY (EDITORA_ID) REFERENCES EDITORAS(ID)
);

INSERT INTO EDITORAS (NOME, CNPJ, TELEFONE, CIDADE) VALUES
('Editora Alfa', '00.000.000/0001-01', '11999999991', 'São Paulo'),
('Editora Beta', '11.111.111/0001-11', '11999999992', 'Rio de Janeiro'),
('Editora Gama', '22.222.222/0001-22', '11999999993', 'Belo Horizonte'),
('Editora Delta', '33.333.333/0001-33', '11999999994', 'Curitiba');

INSERT INTO LIVROS (TITULO, AUTOR, ESTOQUE, PRECOCUSTO, PRECOVENDA, EDITORA_ID) VALUES
('O Sol e a Lua', 'Ana Costa', 10, 25.00, 39.90, 1),
('Caminhos da Vida', 'Carlos Silva', 5, 30.00, 49.90, 2),
('História do Tempo', 'Beatriz Lima', 8, 40.00, 59.90, 3),
('Segredos da Mente', 'João Mendes', 12, 20.00, 34.90, 1),
('A Arte de Liderar', 'Mariana Costa', 7, 35.00, 54.90, 4),
('Viagem ao Centro', 'Pedro Almeida', 6, 28.00, 44.90, 2),
('O Código da Alma', 'Fernanda Rocha', 9, 32.00, 52.90, 3),
('Mundos Paralelos', 'Lucas Martins', 4, 45.00, 69.90, 4);

DELIMITER //

CREATE PROCEDURE RELATORIO_LIVRARIA()
BEGIN
    DECLARE totalLivros INT;
    DECLARE totalEditoras INT;
    DECLARE estoqueTotal INT;
    DECLARE valorTotalEstoque DECIMAL(10,2);

    SELECT COUNT(*) INTO totalLivros FROM LIVROS;
    SELECT COUNT(*) INTO totalEditoras FROM EDITORAS;
    SELECT SUM(ESTOQUE) INTO estoqueTotal FROM LIVROS;
    SELECT SUM(ESTOQUE * PRECOCUSTO) INTO valorTotalEstoque FROM LIVROS;

    SELECT 
        totalLivros AS 'Total de Livros',
        totalEditoras AS 'Total de Editoras',
        estoqueTotal AS 'Estoque Total',
        valorTotalEstoque AS 'Valor Total do Estoque (R$)';
END //

DELIMITER ;

CALL RELATORIO_LIVRARIA();



/* EXERCÍCIOS 12 */

CREATE DATABASE VENDAS; 
USE VENDAS;



CREATE TABLE VENDAS (
ID INT  AUTO_INCREMENT PRIMARY KEY,
CODIGOPRODUTO INT ,
QUANTIDADE INT ,
VALOR_UNITARIO DECIMAL (10,2),
VALOR_TOTAL DECIMAL (10,2),
DATAVENDA DATETIME DEFAULT CURRENT_TIMESTAMP
);


DELIMITER //

CREATE PROCEDURE SPINSERIR_VENDA (
    IN pCODIGOPRODUTO INT,
    IN pQUANTIDADE INT,
    IN pVALOR_UNITARIO DECIMAL(10,2)
)
BEGIN
    DECLARE vVALOR_TOTAL DECIMAL(10,2);
    SET vVALOR_TOTAL = pQUANTIDADE * pVALOR_UNITARIO;

    INSERT INTO VENDAS (CODIGOPRODUTO, QUANTIDADE, VALOR_UNITARIO, VALOR_TOTAL)
    VALUES (pCODIGOPRODUTO, pQUANTIDADE, pVALOR_UNITARIO, vVALOR_TOTAL);
END //

DELIMITER ;

CALL SPINSERIR_VENDA(101, 2, 49.90);
SELECT * FROM VENDAS;



/* EXERCÍCIOS 13 */

DELIMITER //

CREATE PROCEDURE spAdicionarColunaDesconto()
BEGIN
    SET @sql = 'ALTER TABLE VENDAS ADD COLUMN Desconto DECIMAL(5,2);';
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

DELIMITER ;

CALL  spAdicionarColunaDesconto();


/* EXERCÍCIOS 14 */

DELIMITER //

CREATE PROCEDURE spAtualizarDesconto (
    IN pID INT,
    IN pPercentualDesconto DECIMAL(5,2)
)
BEGIN
    UPDATE VENDAS
    SET Desconto = pPercentualDesconto
    WHERE ID = pID;
END //

DELIMITER ;

CALL spAtualizarDesconto(1, 10.00);


/* EXERCÍCIOS 15 */

DELIMITER //

CREATE PROCEDURE spGerarBackupSP()
BEGIN
    SET @sql = '
    CREATE PROCEDURE spbackupvendas()
    BEGIN
        SELECT "Backup de vendas iniciado." AS Mensagem;
    END
    ';

    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END //

CALL spGerarBackupSP();

DELIMITER ;

/* EXERCÍCIOS 16 */

CREATE DATABASE EXERCICIO_16;
USE EXERCICIO_16;



DELIMITER //

CREATE PROCEDURE sprelatoriotempo()
BEGIN
    DECLARE horaInicio DATETIME;
    DECLARE horaFim DATETIME;
    DECLARE tempoDecorrido INT;
    SELECT NOW() INTO horaInicio;
    SELECT CONCAT('Hora de Início: ', DATE_FORMAT(horaInicio, '%Y-%m-%d %H:%i:%s')) AS 'Relatório';
    DO SLEEP(15);
    SELECT NOW() INTO horaFim;
    SELECT CONCAT('Hora de Fim: ', DATE_FORMAT(horaFim, '%Y-%m-%d %H:%i:%s')) AS 'Relatório';
    SELECT TIMESTAMPDIFF(SECOND, horaInicio, horaFim) INTO tempoDecorrido;
    SELECT CONCAT('Tempo decorrido (em segundos): ', tempoDecorrido) AS 'Relatório';
END //

DELIMITER ;

CALL sprelatoriotempo();